from sklearn.cluster import KMeans
from colormath.color_objects import sRGBColor, LabColor
from colormath.color_conversions import convert_color
from colormath.color_diff import delta_e_cie2000

import matplotlib.pyplot as plt
import argparse
import utils
import cv2
import numpy as np


# we can dispaly it with matplotlib
image = cv2.imread("C:\\images\\2.png", -1)
image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)


def show_color(color):#색 하나 막대로 출력하는 함수
    bar = np.zeros((50, 300, 3), dtype = "uint8")
    cv2.rectangle(bar, (0,0), (300, 300), color.astype("uint8").tolist(), -1)
    
    plt.figure()
    plt.axis("off")
    plt.imshow(bar)
    plt.show()
    
    
def centroid_histogram(clt):
    for i in clt.cluster_centers_:
        if (i.all(0)):
            clt.cluster_centers_ = np.delete(clt.cluster_centers_,i,axis=0) #np.delete(clt.cluster_centers_, i, axis=0)

    
    # grab the number of different clusters and create a histogram
    # based on the number of pixels assigned to each cluster
    numLabels = np.arange(0, len(np.unique(clt.labels_)) + 1)
    (hist, _) = np.histogram(clt.labels_, bins = numLabels)
 
    # normalize the histogram, such that it sums to one
    hist = hist.astype("float")
    hist /= hist.sum()

    max_color = hist.argmax()#제일 비율 높은 색의 인덱스
    #print(max_color)

    print("Higest rate color :", clt.cluster_centers_[max_color])#제일 비율 높은 색의 rgb 값
    #if(clt.cluster_centers_[max_color].all(0)):
    if(clt.cluster_centers_[max_color][0]!= 0 and clt.cluster_centers_[max_color][1]!= 0 and clt.cluster_centers_[max_color][2]!= 0):
        show_color(clt.cluster_centers_[max_color])
    
    # return the histogram
    return hist, clt.cluster_centers_[max_color][0], clt.cluster_centers_[max_color][1], clt.cluster_centers_[max_color][2]


def plot_colors(hist, centroids):
    # initialize the bar chart representing the relative frequency
    # of each of the colors
    bar = np.zeros((50, 300, 3), dtype = "uint8")
    startX = 0
 
    # loop over the percentage of each cluster and the color of
    # each cluster
    for (percent, color) in zip(hist, centroids):
        # plot the relative percentage of each cluster
        endX = startX + (percent * 300)
        cv2.rectangle(bar, (int(startX), 0), (int(endX), 50),
            color.astype("uint8").tolist(), -1)
        startX = endX

    # return the bar chart
    return bar


gap = image.shape[0]//35
pieces = image.shape[0]//gap
max_color_rgb = [[0 for col in range(3)] for row in range(pieces + 1)]
delta_e = 0 #[[0] for row in range(pieces)]


for i in range(image.shape[0], 0, -gap):
    start = i
    end = i - gap
    #if(end > image.shape[0]):
        #end = image.shape[0]
    if(end < 0):
        end = 0
    
    crop_img = image[end:start, 0:image.shape[1]]    
    each_image = crop_img.reshape((crop_img.shape[0] * crop_img.shape[1], 3)) #픽셀화
    
    clt = KMeans(n_clusters = 7)
    clt.fit(each_image)
    
    j = i//gap
    print(j)
    hist, max_color_rgb[j][0], max_color_rgb[j][1], max_color_rgb[j][2] = centroid_histogram(clt)
    #print(hist) #색 각각이 차지하는 비율
    
    #bar = plot_colors(hist, clt.cluster_centers_)
    
    #plt.figure()
    #plt.axis("off")
    #plt.imshow(bar)
    #plt.show()
    
    
sum_standard=[0]*3
avg_max_color_rgb=[0]*3

for i in range(pieces - 1, 0, -1):
    if(max_color_rgb[i][0] != 0 and max_color_rgb[i][1] != 0 and max_color_rgb[i][2] != 0):
        sum_standard[0] = max_color_rgb[i][0] + max_color_rgb[i-1][0] + max_color_rgb[i-2][0]
        sum_standard[1] = max_color_rgb[i][1] + max_color_rgb[i-1][1] + max_color_rgb[i-2][1]
        sum_standard[2] = max_color_rgb[i][2] + max_color_rgb[i-1][2] + max_color_rgb[i-2][2]

        avg_max_color_rgb[0] = sum_standard[0]/3.0
        avg_max_color_rgb[1] = sum_standard[1]/3.0
        avg_max_color_rgb[2] = sum_standard[2]/3.0
        break


print("avg_max_color_rgb : %.8f %.8f %.8f" %(avg_max_color_rgb[0],avg_max_color_rgb[1],avg_max_color_rgb[2]))

count = 0
for j in range(pieces, 0, -1):
    if(max_color_rgb[j][0] != 0 and max_color_rgb[j][1] != 0 and max_color_rgb[j][2] != 0):
        color1_rgb = sRGBColor(avg_max_color_rgb[0], avg_max_color_rgb[1], avg_max_color_rgb[2]) #맨아래 3개 평균색
        color2_rgb = sRGBColor(max_color_rgb[j][0], max_color_rgb[j][1], max_color_rgb[j][2]) #비교할 색 차례대로 넣기
    
        color1_lab = convert_color(color1_rgb, LabColor)
        color2_lab = convert_color(color2_rgb, LabColor)
    
        delta_e = delta_e_cie2000(color1_lab, color2_lab)
        if(delta_e > 35): #일단 35인데 추후 실제 트레이닝 데이터로 수치 다듬기
            count = count + 1
        print("[", j, "]", "deltaE = ", delta_e, "count = ", count)

if(count >= 3):
    print("Label O!")
else:
    print("Label X!")
