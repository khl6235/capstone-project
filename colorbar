from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import argparse
import utils
import cv2
import numpy as np


# we can dispaly it with matplotlib
image = cv2.imread("C:\\images\\15.png", -1)
image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

#black = np.array([0,0,0])

def rgb2hex(rgb):
    hex = "#{:02x}{:02x}{:02x}".format(int(rgb[0]), int(rgb[1]), int(rgb[2]))
    return hex

 
def centroid_histogram(clt):

	for i in clt.cluster_centers_:
		if (rgb2hex(i) == '#000000'):
			clt.cluster_centers_ = np.delete( clt.cluster_centers_,i,axis=0) #np.delete(clt.cluster_centers_, i, axis=0)
      
	hex_colors = [rgb2hex(center) for center in clt.cluster_centers_]
	print(hex_colors)
    
	#del hex_colors[hex_colors.index('#000000')]
	#print(hex_colors)
    
    # grab the number of different clusters and create a histogram
	# based on the number of pixels assigned to each cluster
	numLabels = np.arange(0, len(np.unique(clt.labels_)) + 1)
	(hist, _) = np.histogram(clt.labels_, bins = numLabels)
 
	# normalize the histogram, such that it sums to one
	hist = hist.astype("float")
	hist /= hist.sum()
     
	# return the histogram
	return hist


def plot_colors(hist, centroids):
	# initialize the bar chart representing the relative frequency
	# of each of the colors
	bar = np.zeros((50, 300, 3), dtype = "uint8")
	startX = 0
 
	# loop over the percentage of each cluster and the color of
	# each cluster
	for (percent, color) in zip(hist, centroids):
		# plot the relative percentage of each cluster
		endX = startX + (percent * 300)
		cv2.rectangle(bar, (int(startX), 0), (int(endX), 50),
			color.astype("uint8").tolist(), -1)
		startX = endX
	
	# return the bar chart
	return bar


gap = image.shape[0]//10

for i in range(0, image.shape[0], gap):
    start = i
    end = i + gap
    if(end > image.shape[0]):
        end = image.shape[0]
    
    crop_img = image[start:end, 0:image.shape[1]]
    
    each_image = crop_img.reshape((crop_img.shape[0] * crop_img.shape[1], 3)) #픽셀화
    
    
    clt = KMeans(n_clusters = 7)
    clt.fit(each_image)
    
    hist = centroid_histogram(clt)
    print(hist)
    bar = plot_colors(hist, clt.cluster_centers_)
    plt.figure()
    plt.axis("off")
    plt.imshow(bar)
    plt.show()
    
